import os
import base64
from typing import Dict, List, Optional
from github import Github, GithubException
from loguru import logger
import json
from datetime import datetime

class GitHubClient:
    """GitHub client for experiment PRs and code management"""
    
    def __init__(self):
        self.token = os.getenv("GITHUB_TOKEN")
        self.repo_name = os.getenv("GITHUB_REPO")
        self.default_branch = os.getenv("GITHUB_DEFAULT_BRANCH", "main")
        
        if not self.token or not self.repo_name:
            logger.warning("GitHub credentials not properly configured")
            self.github = None
            self.repo = None
        else:
            self.github = Github(self.token)
            try:
                self.repo = self.github.get_repo(self.repo_name)
                logger.info(f"Connected to GitHub repo: {self.repo_name}")
            except GithubException as e:
                logger.error(f"Failed to connect to GitHub repo: {e}")
                self.repo = None
    
    def create_experiment_branch(self, experiment_key: str) -> str:
        """Create a new branch for the experiment"""
        if not self.repo:
            logger.error("GitHub repo not available")
            return None
        
        try:
            branch_name = f"experiment/{experiment_key}-{datetime.now().strftime('%Y%m%d')}"
            
            # Get the default branch reference
            default_branch = self.repo.get_branch(self.default_branch)
            
            # Create new branch
            new_branch = self.repo.create_git_ref(
                ref=f"refs/heads/{branch_name}",
                sha=default_branch.commit.sha
            )
            
            logger.info(f"Created branch: {branch_name}")
            return branch_name
            
        except Exception as e:
            logger.error(f"Failed to create branch: {e}")
            return None
    
    def create_or_update_file(self, branch: str, file_path: str, content: str, 
                            commit_message: str) -> bool:
        """Create or update a file in the specified branch"""
        if not self.repo:
            logger.error("GitHub repo not available")
            return False
        
        try:
            # Check if file exists
            try:
                file = self.repo.get_contents(file_path, ref=branch)
                # File exists, update it
                self.repo.update_file(
                    path=file_path,
                    message=commit_message,
                    content=content,
                    branch=branch,
                    sha=file.sha
                )
                logger.info(f"Updated file: {file_path}")
            except:
                # File doesn't exist, create it
                self.repo.create_file(
                    path=file_path,
                    message=commit_message,
                    content=content,
                    branch=branch
                )
                logger.info(f"Created file: {file_path}")
            
            return True
            
        except Exception as e:
            logger.error(f"Failed to create/update file {file_path}: {e}")
            return False
    
    def open_pull_request(self, experiment_key: str, branch: str, 
                         tracking_plan: Dict, code_snippets: List[Dict]) -> Optional[str]:
        """Open a pull request for the experiment"""
        if not self.repo:
            logger.error("GitHub repo not available")
            return None
        
        try:
            # Create PR title and description
            title = f"ðŸš€ Experiment: {experiment_key}"
            
            description = f"""
# Experiment: {experiment_key}

## Overview
This PR implements the tracking and code changes for experiment: {experiment_key}

## Changes Made

### Tracking Plan
```json
{json.dumps(tracking_plan, indent=2)}
```

### Code Changes
"""
            
            # Add code snippets to description
            for snippet in code_snippets:
                description += f"""
#### {snippet.get('file_path', 'Unknown file')}
```{snippet.get('language', 'text')}
{snippet.get('content', '')}
```
"""
            
            description += f"""
## Testing
- [ ] Verify tracking events are firing correctly
- [ ] Confirm A/B variant assignment works
- [ ] Test in staging environment

## Rollout Plan
- [ ] Deploy to staging
- [ ] Validate tracking
- [ ] Deploy to production
- [ ] Monitor metrics

---
*This PR was automatically generated by the Growth Experiment Co-Pilot*
"""
            
            # Create the pull request
            pr = self.repo.create_pull(
                title=title,
                body=description,
                head=branch,
                base=self.default_branch
            )
            
            logger.info(f"Created PR #{pr.number}: {title}")
            return pr.html_url
            
        except Exception as e:
            logger.error(f"Failed to create PR: {e}")
            return None
    
    def add_comment_to_pr(self, pr_number: int, comment: str) -> bool:
        """Add a comment to an existing PR"""
        if not self.repo:
            logger.error("GitHub repo not available")
            return False
        
        try:
            pr = self.repo.get_pull(pr_number)
            pr.create_issue_comment(comment)
            logger.info(f"Added comment to PR #{pr_number}")
            return True
            
        except Exception as e:
            logger.error(f"Failed to add comment to PR #{pr_number}: {e}")
            return False
    
    def get_pr_status(self, pr_number: int) -> Dict:
        """Get the status of a pull request"""
        if not self.repo:
            logger.error("GitHub repo not available")
            return {}
        
        try:
            pr = self.repo.get_pull(pr_number)
            
            return {
                "number": pr.number,
                "title": pr.title,
                "state": pr.state,
                "merged": pr.merged,
                "mergeable": pr.mergeable,
                "status": pr.get_commits().reversed[0].get_statuses().totalCount,
                "url": pr.html_url
            }
            
        except Exception as e:
            logger.error(f"Failed to get PR status for #{pr_number}: {e}")
            return {}
    
    def create_experiment_pr(self, experiment_key: str, tracking_plan: Dict, 
                           code_snippets: List[Dict]) -> Optional[str]:
        """Complete workflow: create branch, add files, open PR"""
        try:
            # Create branch
            branch = self.create_experiment_branch(experiment_key)
            if not branch:
                return None
            
            # Add tracking plan
            tracking_file = f"experiments/{experiment_key}/tracking_plan.json"
            self.create_or_update_file(
                branch=branch,
                file_path=tracking_file,
                content=json.dumps(tracking_plan, indent=2),
                commit_message=f"Add tracking plan for {experiment_key}"
            )
            
            # Add code snippets
            for snippet in code_snippets:
                file_path = snippet.get('file_path')
                content = snippet.get('content', '')
                language = snippet.get('language', 'text')
                
                if file_path and content:
                    self.create_or_update_file(
                        branch=branch,
                        file_path=file_path,
                        content=content,
                        commit_message=f"Add implementation for {experiment_key}"
                    )
            
            # Open PR
            pr_url = self.open_pull_request(experiment_key, branch, tracking_plan, code_snippets)
            
            return pr_url
            
        except Exception as e:
            logger.error(f"Failed to create experiment PR: {e}")
            return None
